[tool.poetry]
name = "rra-building-density"
version = "0.0.1"
description = "Extraction and processing pipelines for a variety of building density products."
authors = [
    "James Collins <collijk@uw.edu>",
]
license = "BSD-3-Clause"
readme = "README.md"

documentation = "https://collijk.github.io/rra-building-density"
homepage = "https://collijk.github.io/rra-building-density"
repository = "https://github.com/collijk/rra-building-density"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "rra_building_density", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.10, <3.13"
click = "^8.1.8"
requests = "^2.32.3"
tqdm = "^4.67.1"
rra-tools = "^1.0.17"
geopandas = "^1.0.1"
shapely = "^2.0.6"
contextily = "^1.6.2"
matplotlib = "^3.10.0"
rasterio = "^1.4.3"
scipy = "^1.14.1"
seaborn = "^0.13.2"
rasterra = "^0.6.1"
pydantic = "^2.10.4"

[tool.poetry.group.dev.dependencies]
mkdocstrings = {version = ">=0.23", extras = ["python"]}
mkdocs-material = "*"
mkdocs-table-reader-plugin = "*"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-section-index = "^0.3.9"
mypy = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
ruff = ">=0.2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
bdrun = "rra_building_density.cli:bdrun"
bdtask = "rra_building_density.cli:bdtask"

[tool.ruff]
target-version = "py310" # The lowest supported version

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "COM812",   # flake8 missing trailing comma, formatter handles
    "ISC001",   # Implicit string concatenation
    "ANN",      # Type hints related, let mypy handle these.
    "D",        # Docstrings related, way too strict to our taste
    "RUF007",   # zip is idiomatic, this is a dumb check
    "RET505",   # Else after return, makes a lot of false positives
    "E501",     # Line too long, this is autoformatted
    "PLR0913",  # Too many args, bad check for CLIs
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
]
"scripts/**" = [
    "INP001",   # "Scripts are not part of a package."
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
addopts = """\
    --cov rra_building_density \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
disallow_any_unimported = true

# If you need to ignore something for some specific module,
# add overrides for them. Avoid changing the global config!
# For example:
# [[tool.mypy.overrides]]
# module = [
#  "my_unpyted_dependency1.*",
#  "my_unpyted_dependency2.*"
# ]
# ignore_missing_imports = true

# [[tool.mypy.overrides]]
# module = [
#   "tests/my_thing/test_my_thing",
# ]
# disallow_untyped_defs = false
